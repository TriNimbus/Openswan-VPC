---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template for creating a transit VPC .'
Parameters:
  InstanceType:
    Description: Transit router instance type
    Type: String
    Default: t2.medium
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  VPCCidr:
    Description: CIDR block for Transit VPC
    Type: String
    Default: 100.64.127.192/26
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  VPCPublicSubnet1:
    Description: Address range for Transit VPC subnet to be created in AZ1
    Type: String
    Default: 100.64.127.224/28
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  VPCPublicSubnet2:
    Description: Address range for Transit VPC subnet to be created in AZ1
    Type: String
    Default: 100.64.127.240/28
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BgpAsn:
    Description: BGP ASN to use for Transit VPC
    Type: String
    Default: 65000
  EmailAddress:
    Description: Email Address for SNS Topic. Alarms for Vault instance memory utilization
    Type: String
Mappings:
  AWSRegionAMI:
    us-east-1:
      Amazon: ami-c58c1dd3
      Ubuntu: ami-80861296
    us-west-2:
      Amazon: ami-4836a428
      Ubuntu: ami-efd0428f
    eu-west-1:
      Amazon: ami-01ccc867
      Ubuntu: ami-a8d2d7ce

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidr
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - vpc
              - Ref: AWS::StackName
      - Key: TransitVPC
        Value:
          Ref: AWS::StackId
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: VPCPublicSubnet1
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - public-subnet1
              - Ref: AWS::StackName
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: VPCPublicSubnet2
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - public-subnet2
              - Ref: AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - igw
              - Ref: AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - rt1
              - Ref: AWS::StackName
  Route1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable1
  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - rt2
              - Ref: AWS::StackName
  Route2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable2
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  SubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      NetworkAclId:
        Ref: NetworkAcl
  SubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      NetworkAclId:
        Ref: NetworkAcl
  CSRInstanceEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      # InstanceId:
      #   Ref: WebServerInstance
  CSRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '179'
        ToPort: '179'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
  CGW:
   Type: AWS::EC2::CustomerGateway
   Properties:
     BgpAsn:
       Ref: BgpAsn
     IpAddress:
       Ref: CSRInstanceEIP1
     Type: ipsec.1
     Tags:
     - Key: Name
       Value:
         Fn::Join:
           - '-'
           - - cgw
             - Ref: AWS::StackName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Access to the Router
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '179'
        ToPort: '179'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - sg
              - Ref: AWS::StackName
  CSRRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  CSRInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "CSRRole"
  CSRInstance1:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [ AWSRegionAMI, !Ref "AWS::Region", Amazon ]
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: CSRInstanceProfile
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - CSR1
              - Ref: AWS::StackName
      NetworkInterfaces:
      - GroupSet:
        - Ref: CSRSecurityGroup
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: Subnet1
      UserData:
       Fn::Base64:
         Fn::Join:
           - ''
           - - "#!/bin/bash -xe\n"
             - "yum update -y aws-cfn-bootstrap \n"
             - "yum install -y openswan quagga \n"
             - "yum erase ipsec-tools \n"
  CSRInstanceAssocEIP1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId:
        Ref: CSRInstance1
      EIP:
        Ref: CSRInstanceEIP1

MySNSTopic:
  Type: "AWS::SNS::Topic"
  Properties:
    Subscription:
      -
        Endpoint:
          Fn::GetAtt:
            - "MyQueue1"
            - "Arn"
        Protocol: "sqs"
      -
        Endpoint:
          Fn::GetAtt:
            - "MyQueue2"
            - "Arn"
        Protocol: "sqs"
    TopicName: "SampleTopic"
  CSRRecoveryAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: EC2 Autorecovery for CSR1 node. Autorecover if we fail EC2
        status checks for 5 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
      - Ref: RebootSNSTopic
      - Fn::Join:
        - ''
        - - 'arn:aws:automate:'
          - Ref: AWS::Region
          - ":ec2:recover"
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: CSRInstance1


Outputs:
  VPCId:
    Value:
      Ref: VPC
  CSRInstanceEIP1:
    Value:
      Ref: CSRInstanceEIP1
  CSRInstanceId1:
    Value:
      Ref: CSRInstance1
  InternetGateway:
    Value:
      Ref: InternetGateway
  CustomerGateway:
    Value:
      Ref: CGW
  CSRSecurityGroup:
    Value:
      Ref: CSRSecurityGroup

#!/bin/bash

### BEGIN INIT INFO
# Provides:          VPN Gateway to AWS VPC 
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start VPN Customer Gateway at boot time
# Description:       Start VPN Customer Gateway at boot time
### END INIT INFO

prog=$(basename $0)
# if DEBUG is set (to anything but '0') send a copy of the output to /dev/tty so the caller
# can see the messages without checking the system logs
if [ "$DEBUG" -a "$DEBUG" != 0 ]; then
    logger="logger -s -t $prog"
else
    logger="logger -t $prog"
fi

if [ `id -u` -ne 0 ]
then
    echo "permission denied (must be superuser)" |
      logger -s -p daemon.error -t $prog 2>&1
    exit 4
fi

RETVAL=0

setup_environment() {
  curl="curl --retry 3 --silent --show-error --fail"
  instance_userdata_url=http://169.254.169.254/2012-01-12/user-data
  instance_metadata_url=http://169.254.169.254/latest/meta-data
  ox='ip netns exec openswan'

  # Wait until meta-data is available.
  perl -MIO::Socket::INET -e '
   until(new IO::Socket::INET("169.254.169.254:80")){print"Waiting for meta-data...\n";sleep 1}
       ' | $logger

  ENVIRONMENT_VARIABLES=`$curl -s $instance_userdata_url`
  eval $ENVIRONMENT_VARIABLES

  INSTANCE_IP=`$curl -s $instance_metadata_url/local-ipv4`
  QUAGGA_PASSWORD=testPassword
  GATEWAY_IP=169.254.240.1
  NAMESPACE_TUNNEL1_IP=169.254.0.2
  NAMESPACE_TUNNEL2_IP=169.254.0.3

  #Create a network namespace
  ip netns add openswan

  #Setup Basic Network requirements
  ip link add type veth
  ip link set dev veth1 netns openswan
  ip link set dev veth0 name toopenswan
  ip addr add dev toopenswan $GATEWAY_IP/20
  $ox ip link set dev veth1 name eth0
  ip link set toopenswan up
  $ox ip link set eth0 up
  $ox ip link set lo up
  $ox ip r add default via $GATEWAY_IP
  sysctl -w net.ipv4.conf.all.forwarding=1

    cat <<EOF > /etc/quagga/zebra.conf
hostname $HOSTNAME
password $QUAGGA_PASSWORD
enable password $QUAGGA_PASSWORD
interface eth0
interface lo
line vty
EOF

  chmod 640 /etc/quagga/zebra.conf
  chown quagga:quagga /etc/quagga/zebra.conf

    cat <<EOF > /etc/quagga/bgpd.conf
hostname $HOSTNAME
password $QUAGGA_PASSWORD
enable password $QUAGGA_PASSWORD
!
log file /var/log/quagga/bgpd.log
debug bgp events
debug bgp zebra
debug bgp updates
!
line vty
EOF

  chmod 640 /etc/quagga/bgpd.conf
  chown quagga:quagga /etc/quagga/bgpd.conf
  mkdir -p /etc/quagga/peers.d/

  cat <<EOF > /etc/ipsec.conf
# /etc/ipsec.conf - Openswan IPsec configuration file
#
# Manual:     ipsec.conf.5
#
# Please place your own config files in /etc/ipsec.d/ ending in .conf

version 2.0     # conforms to second version of ipsec.conf specification

# basic configuration
config setup
        protostack=netkey
        nat_traversal=no
        virtual_private=
        oe=off

include /etc/ipsec.d/*.conf
EOF
chmod 600 /etc/ipsec.conf
}

start_control_plane() {
  $ox /etc/init.d/ipsec restart
  $ox /etc/init.d/zebra restart
  $ox /etc/init.d/bgpd restart
}

stop_control_plane() {
  $ox /etc/init.d/bgpd stop
  $ox /etc/init.d/zebra stop 
  $ox /etc/init.d/ipsec stop 
}

delete_files() {
  rm /etc/ipsec.conf
  rm /etc/ipsec.d/aws.conf
  rm /etc/ipsec.d/awstunnel1.secrets
  rm /etc/ipsec.d/awstunnel2.secrets
  rm /etc/quagga/bgpd.conf
  rm /etc/quagga/zebra.conf
}

start() {
    (
    setup_environment
    start_control_plane
    RETVAL=$? 
    ) 2>&1 | $logger
    return $RETVAL
}


stop() {
    (
    setup_environment
    stop_control_plane
    teardown_network
    delete_files
    RETVAL=$? 
    ) 2>&1 | $logger
    return $RETVAL
}

restart() {
    stop
    start
}

# do it
case "$1" in
    start|--start)
         start
         ;;
    stop|--stop)
         stop
         ;;
    restart|--restart)
         restart
 	 ;;
    *)
         echo "Usage: $prog {start|stop|restart}"
         RETVAL=2
esac
 	
exit $RETVAL
